package handlers

import (
	"Go_bot/config"
	"Go_bot/pkg/basicfunc"
	"Go_bot/pkg/httpjson"
	"Go_bot/pkg/keyboard"
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä—ã –ö–ù–ë
var gameKeyboard = keyboard.GameKeyboard

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if update.Message.IsCommand() {
		handleCommand(&msg, update)
	} else {
		handleTextMessage(bot, &msg, update)
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
	if msg.Text != "" {
		basicfunc.SendMessage(bot, msg)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
	basicfunc.SendGroupMessage(bot, update)
}

func handleCommand(msg *tgbotapi.MessageConfig, update tgbotapi.Update) {
	switch update.Message.Command() {
	case "start":
		msg.Text = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç %s %s\n–Ø –±–æ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ Esp32", update.Message.From.FirstName, update.Message.From.LastName)
	case "weather":
		handleWeather(msg)
	case "random_insult":
		handleRandomInsult(msg)
	case "how_you_gosling":
		msg.Text = fmt.Sprintf("–¢—ã Go—Å–ª–∏–Ω–≥ –Ω–∞ %s%%", basicfunc.HowYouGosling())
	case "exchange_rates":
		handleExchangeRates(msg)
	case "game":
		msg.ReplyMarkup = gameKeyboard
		msg.Text = "–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞"
	}
}

func handleTextMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.MessageConfig, update tgbotapi.Update) {
	switch strings.ToLower(update.Message.Text) {
	case "–ø—Ä–∏–≤–µ—Ç":
		msg.Text = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç %s %sn–Ø –±–æ—Ç", update.Message.From.FirstName, update.Message.From.LastName)
	case "–∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é":
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		msg.Text = "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ"
	case "ü™®":
		msg.Text = basicfunc.Game(bot, update, 0)
	case "‚úÇÔ∏è":
		msg.Text = basicfunc.Game(bot, update, 1)
	case "üìÑ":
		msg.Text = basicfunc.Game(bot, update, 2)
	}
}

func handleWeather(msg *tgbotapi.MessageConfig) {
	weatherToken := config.WEATER_TOKEN
	if weatherToken == "" {
		log.Fatal("Weather Token is empty")
	}
	data, err := httpjson.FetchJsonFromUrl(fmt.Sprintf("http://api.openweathermap.org/data/2.5/find?q=Ufa&type=like&appid=%s", weatherToken))
	if err != nil {
		msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: "
	} else {
		msg.Text = basicfunc.Weather(data)
	}
}

func handleRandomInsult(msg *tgbotapi.MessageConfig) {
	data, err := httpjson.FetchJsonFromUrl("https://evilinsult.com/generate_insult.php?lang=ru&type=json")
	if err != nil {
		msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è: " + err.Error()
	} else {
		msg.Text = basicfunc.RandomInsult(data)
	}
}

func handleExchangeRates(msg *tgbotapi.MessageConfig) {
	data, err := httpjson.FetchJsonFromUrl("https://www.cbr-xml-daily.ru/daily_json.js")
	if err != nil {
		msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: " + err.Error()
	} else {
		msg.Text = basicfunc.ExchangeRates(data)
	}
}

// func recoverFromlog.Println() {
// 	//—Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É
// 	if r := recover(); r != nil {
// 		fmt.Println("Recovered from log.Println:", r)
// 		fmt.Println("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
// 		cmd := exec.Command(os.Args[0])
// 		cmd.Stdout = os.Stdout
// 		cmd.Stderr = os.Stderr
// 		cmd.Start()
// 		os.Exit(1)
// 	}
// }
