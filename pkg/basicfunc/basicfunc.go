package basicfunc

import (
	"Go_bot/pkg/convert"
	"fmt"
	"log"
	"math/rand"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
func Weather(data map[string]any) (message string) {
	message = "–ü–æ–≥–æ–¥–∞ –æ—Ç –†–∞–π–∞–Ω–∞ GO—Å–ª–∏–Ω–≥–∞\n–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –£—Ñ–µ:\n\n"

	list, ok := data["list"].([]any)
	if !ok {
		message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ\n"
		return message
	}

	if len(list) > 0 {
		firstItem, ok := list[0].(map[string]any)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ\n"
			return message
		}

		mainData, ok := firstItem["main"].(map[string]any)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ\n"
			return message
		}

		tempKelvin, ok := mainData["temp"].(float64)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É\n"
		} else {
			tempCelsius := convert.KelToCel(tempKelvin)
			message += fmt.Sprintf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.f ¬∞C\n", tempCelsius)
		}

		rain, ok := firstItem["rain"]
		if ok && rain != nil {
			message += fmt.Sprintf("–î–æ–∂–¥—å: %v\n", rain)
		} else {
			message += "–î–æ–∂–¥—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
		}

		snow, ok := firstItem["snow"]
		if ok && snow != nil {
			message += fmt.Sprintf("–°–Ω–µ–≥: %v\n", snow)
		} else {
			message += "–°–Ω–µ–≥: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
		}

		windData, ok := firstItem["wind"].(map[string]any)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Ç—Ä–µ\n"
			return message
		}

		windSpeed, ok := windData["speed"].(float64)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞\n"
		} else {
			message += fmt.Sprintf("–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: %.2f –º/c\n", windSpeed)
		}

		humidity, ok := mainData["humidity"].(float64)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å\n"
		} else {
			message += fmt.Sprintf("–í–ª–∞–∂–Ω–æ—Å—Ç—å: %.f %%\n", humidity)
		}

		cloudsData, ok := firstItem["clouds"].(map[string]any)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏\n"
			return message
		}
		clouds, ok := cloudsData["all"].(float64)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–∞—á–Ω–æ—Å—Ç—å\n"
		} else {
			message += fmt.Sprintf("–û–±–ª–∞—á–Ω–æ—Å—Ç—å: %.f %%\n", clouds)
		}

		pressure, ok := mainData["pressure"].(float64)
		if !ok {
			message += "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ\n"
		} else {
			message += fmt.Sprintf("–î–∞–≤–ª–µ–Ω–∏–µ: %.f –≥–ü–∞\n", pressure)
		}

	} else {
		message += "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
		return message
	}

	return message
}

func RandomInsult(data map[string]any) (message string) {
	message = data["insult"].(string)
	return message
}

func HowYouGosling() (message string) {
	message = strconv.Itoa(rand.Intn(100))
	return message
}

func ExchangeRates(data map[string]any) (message string) {

	listTicker := [...]string{"USD", "EUR", "CNY", "CHF", "JPY", "BYN", "HKD", "KZT", "UAH", "RSD", "PLN", "GBP"}
	time := fmt.Sprintf("–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ %s\n\n", data["Date"].(string)[:10])
	message += time
	for _, ticker := range listTicker {
		valute := data["Valute"].(map[string]any)[ticker].(map[string]any)
		rate := valute["Value"].(float64) / valute["Nominal"].(float64)
		message += fmt.Sprintf("%s -> %.2f\n", valute["Name"], rate)

	}
	return message
}
func Game(bot *tgbotapi.BotAPI, update tgbotapi.Update, moveUser uint8) (message string) {
	var moveBot string
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–•–æ–¥ –±–æ—Ç–∞")
	//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	SendMessage(bot, msg)

	randomNum := rand.Intn(3)
	switch randomNum {
	case 0:
		moveBot = "ü™®"
	case 1:
		moveBot = "‚úÇÔ∏è"
	case 2:
		moveBot = "üìÑ"
	}

	msg = tgbotapi.NewMessage(update.Message.Chat.ID, moveBot)
	//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	SendMessage(bot, msg)

	if uint8(randomNum) == moveUser {
		message = "–ù–∏—á—å—è"
	} else if (moveUser+1)%3 == uint8(randomNum) {
		message = "–ü–æ–±–µ–¥–∞ —Ç–≤–æ—è!"
	} else {
		message = "–Ø –ø–æ–±–µ–¥–∏–ª! —Ö–∞—Ö–∞–∞—Ö–∞"
	}

	return message
}
func SendMessage(bot *tgbotapi.BotAPI, msg tgbotapi.MessageConfig) {
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É –∫—Ç–æ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–ª –±–æ—Ç—É
func SendGroupMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	groupMsg := tgbotapi.NewMessage(-1002065132697, fmt.Sprintf("%s \n–û—Ç: @%s", update.Message.Text, update.Message.From.UserName))
	if _, err := bot.Send(groupMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: %v", err)
	}
}
